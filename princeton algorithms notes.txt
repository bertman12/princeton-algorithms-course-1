Aliasing - when you assign to variables to the same memory reference. This happened a lot in the resource planner, caused annoying bugs and readability problems.

Function/method - sequence of statements run one after the other. 

Modular programming - 
. resuable code
. localize debugging
. substitute improved implementations
. 
. 

Binary Search
. takes sorted list
. starts in middle of array, then checks if the target is greater or less than the middle value
. if greater, the the lower bound is moved to the index after the current middle
. if lesser, then the upper bound is moved to an index before the current middle
. the middle is recalculated and the process repeats until the mid is found or there are no more elements to look at

====== 2/7/23

basic approach to developing and analyzing algorithms.

Dynamic connectivity. 
. model the problem ; main elements of hte problem that needs to be solved
. find an algorithm to solve it
. fast enough? fits in memory?
. if not, figure out why
. find a way to adress the problem
. iterate until satisfied
-scientific method
-use mathematical models

Union command, connect 2 objects.
Find/connected query: is there a path connecting the two objects?

Modeling the connections: 
Equivalence relation is when A = B and B = A
Reflexive: p is connected to p (itself)
Symmetric: p is connected to q, then q is connected to p
Transitive: if p is connected to q and q is connected to r, the p is connected to r.

Connected components: Maximal set of objects that are mutually connected.

With union connect: Merge both connected component sets together.



=====

Quadratic algorithms are very slow.

Improvement for union-find
. use weighting
. link the root of smaller tree to the root of the large tree.
. weighted algorithm 
. size array keeps track of the number of items rooted in the tree of that item
. minute 6/13min - he demonstrates a proof of why the run time of the improved quick-union is (log 2 N)

log*N - number of times you have to take the log of N to get to 1


---
Percolation - determining if one node is connected to another node in an N by N grid.

What is the number of open sites required for percolation to occur?
p is our probaliity for percolation to occur with x amount of open sites in an N by N grid.
Determining this probability of percolation determines the state of something, like electrical nodes connecting, or if people are friends on a social media network.


Monte Carlo simulation 
. initialize N by N whole grid to be blocked
. declare random sites open until top connected to bottom
. vacancy percentage estimates p*

Memoization - saving expensive function calls and returning the saved value if the inputs are the same again.

====== 2-11-23
Random permutation - random ordering of objects.
Permutation - describes a set - arrangement of a set's elements in a linear order. if the set is already ordered, then the set is rearranged.
Fisher-Yates, randomly chooses a k from set N and places into set A, while removing k from set N.

Durstenfield variation simply swaps the position of the strucken letter with the currently iterated element.


==== 2-12-23
uniform distribution - constant probability within domain.

a cycle of length n contains n elements in the set(cycle)

Cycles of length n end where they started

Object Oriented Programming: Building data types; an entity that holds a data type value;

Data type: a set of values and a set of operations on those values.

Abstract Data Types : internal representation of the data type is hidden from the client.

Objects : can take on a data type value; has state(data type values), identity, behavior(from data type methods)

Client: a program that uses a data type.

instance variables define the data type values for the class.

private only allows access to the class instance variable and method fromw within the class's instances.

final prevents an instance variable from being modified after it is initialized.

Constructor: establishes an object identity and initialized the instance variables.

Instance Methods: data type operations.

Encapsulation: encapsulating data types within their implementations(instances); facilitates sperate development of clients and data type implementations . this enables modular programming

Designing APIs: provide the client methods they need and no others.

Inheritance: 1. subtyping, specifies a relationship between classes by speciftying in an interface a set of common methods that each implementing class must contain.

Implementation inheritance: (subclassing) defining a new class that inherits instance methods and instance variables from another class(superclass)

Static methods : it is best when they have no side efects and return something and dont affect global state.

Equality : typically want to test if an objects data type values are equivalent with another.

Equivalence Relation ... 
Reflexive :
Symmertric: 
Transitive: 
Consistent: 
Not null: 

Immutable data : type is a value on an object that can never change once its constructed. Java does this with the final keyword.

Stack overflow: when a recursive method recurs too deeply.

Reflections allow you to access any private fields on any class and change them.

=== 1.3
Important data types involve collections of objects.
. operations revolve around adding, removing, or examining objects int he collection
. bag, queue, stack
. differs in specification of which object is to be removed or examined next.
. these 3 data types reflect generics and iterable collections

Generics: Must be able to collect any data type. 
Generics enable this. ADTCollection<TypeParameter>
Stack<String> Stack<int>

Autoboxing: JAva converts between a primitive type and it's reference type automatically in assigments, method arguments, and arithemtic/logic expressions.\
Stack<Integer> stack = new Stack<Integer>();
stack.push(17);        // autoboxing (int -> Integer)
int i = stack.pop();   // unboxing   (Integer -> int)

Iterable collections: the ability to cycle through a collections items, or iterate through them.

Bags: A collection where removing items is not supported. Prupose is to provide clients with the ability to collect items and then iterate through the collected items.

FIFO Queues: Collection based on the first in first out policy. Ex: Servicing tasks in the order they came in.

Pushdown Stack(LIFO): based on the last in first out policy. Removing the last item (most recent) that came in from the stack.

Fixed capacity generic stack : creates a fixed collection size for a data type. does not ever increase or decrease in size.

Constant amortized time is the average time an algorithm takes over many operations/executions

Stacks, queues can be used where you only need either the first or last element and do not need to access other elements in the array.

Resizing arrays double the array size when full and halve the array size when it is 1/4 full.

Dense array - each index is populated with data
Sparse array - indexes between other data populated indexes are empty.

Linked List : recursive data structure that is either empty or a reference to a node having a generic item and a reference to a linked list.

An iterable defines a function that enables iterating over a collection of data.

Depending on if you make an iterator for a stack or queue, your going to iterate from the most recent item added to the oldest item added(stack LIFO) or your going to iterate first item added to the last item added(queue FIFO).

An iterator function provides the next item in the collection.

You create a private iterator class inside the ADT collection class and then return an istance of that iterator.

Infix: 
 A
 A + B
 (A + B) + (C – D)
PostFix:
 A
 A B +
 A B + C D –

***Queue Analysis

** A class that implements the Iterator interface will provide a function that returns a value
inside a collection. Every time the next function is called it must provide the next value in the 
collection if it exists.

**In FIFO Queue, it is possible that the first queued item could be at any index in the array
The possible reason for this would be that when you dequeue items, you do not want to shift
all elements in the array and make it a dense array. The queue array can remain a sparse
array.

When equeueing items into the collection, you avoid gaps where there is no collection data 
in un-allocated areas of the array. 







